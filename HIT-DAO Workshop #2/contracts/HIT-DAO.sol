// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.1; // Solidity Version

import "@confluxfans/contracts/token/CRC721/extensions/CRC721Enumerable.sol";
import "@confluxfans/contracts/InternalContracts/InternalContractsHandler.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract HIT_DAO is AccessControlEnumerable, CRC721Enumerable, InternalContractsHandler {
    using Strings for uint256;

    // 以下是合约内部的各种状态变量
    uint256 private _tokenIds;

    string private _URI;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    // 构造函数，第一个参数为代币名称，第二个参数为符号
    constructor(
        string memory name_,
        string memory symbol_,
        string memory uri_
    ) ERC721 (name_, symbol_){
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());

        _URI = uri_;
        _tokenIds = 1;
    }

    //simple code for add a account as minter
    function addMinter(address minter_) external {
        grantRole(MINTER_ROLE, minter_);
    }

    function removeMinter(address minter_) external {
        revokeRole(MINTER_ROLE, minter_);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "CRC721NatureAutoId: must have minter role to mint");
        uint256 tokenId = _tokenIds;
        _mint(to, tokenId);
        _tokenIds = tokenId+1;
    }

    /**
     * @dev Batch version of mint function
     */
    function mintBatch(address to, uint256 amount) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "CRC721NatureAutoId: must have minter role to mint");
        uint256 tokenId = _tokenIds;
        for (uint256 index = 0; index < amount; ++index) _mint(to, tokenId + index);
        _tokenIds = tokenId + amount;
    }

    //chy:Batch airdrop method, giving a group of accounts each airdrop 1 nft with a parsimonious id.
    function batchAddItemByAddress(address[] calldata _initialOwners)
    public
    {
        require(hasRole(MINTER_ROLE, _msgSender()), "CRC721NatureAutoId: must have minter role to mint");
        uint256 _length = _initialOwners.length;
        uint256 tokenId = _tokenIds;
        for (uint256 i = 0; i < _length; ++i) {
            _mint(_initialOwners[i], tokenId + i);
        }
        _tokenIds = tokenId + _length;
    }

    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721Enumerable) returns (bool) {
        return AccessControlEnumerable.supportsInterface(interfaceId) || ERC721Enumerable.supportsInterface(interfaceId);
    }
}

// {
//"description": "This is the HIT DAO NFT Collection for those builders from HIT DAO Workshop",
//"image": "", // 存放你图片的真正地址
//"name": "HIT DAO Builder",
//"token_id": "1",
// }
